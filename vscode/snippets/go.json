{
	"snippets main": {
		"prefix": "main",
		"body":[
			"package main\n",
			"func main() {",
			"\t$0",
			"}\n"
		],
		"description": ""
	},
	"snippets sigterm": {
		"prefix": "sigterm",
		"body":[
			"ch := make(chan os.Signal, 1)",
			"signal.Notify(ch, os.Interrupt, syscall.SIGTERM)",
			"select {",
			"\tcase <-ch:",
			"}\n"
		],
		"description": ""
	},
	"snippets go select": {
		"prefix": "go select",
		"body":[
			"go func() {",
			"\tfor {",
			"\t\tselect {",
			"\t\tcase <-time.After(time.Second):",
			"\t\t}",
			"\t}",
			"}()\n"
		],
		"description": ""
	},
	"snippets wait group": {
		"prefix": "wait group",
		"body":[
			"wg := &sync.WaitGroup{}",
			"for range []int{} {",
			"\twg.Add(1)",
			"\tgo func(wg *sync.WaitGroup) {",
			"\t\tdefer wg.Done()",
			"\t}(wg)",
			"}",
			"wg.Wait()\n"
		],
		"description": ""
	},
	"snippets greek alphabet": {
		"prefix": "greek alphabet",
		"body":[
			"var (",
			"\talphabet = []string{",
			"\t\t\"alpha\", \"bata\", \"gamma\", \"delta\", \"epsilon\", \"zeta\", \"eta\", \"theta\",",
			"\t\t\"iota\", \"kappa\", \"lambda\", \"mu\", \"nu\", \"xi\", \"omicron\", \"pi\",",
			"\t\t\"rho\", \"sigma\", \"tau\", \"upsilon\", \"phi\", \"chi\", \"psi\", \"omega\",",
			"\t}",
			")\n"
		],
		"description": ""
	},
	"snippets http server": {
		"prefix": "http server",
		"body":[
			"// _ \"net/http/pprof\"",
			"fmt.Println((&http.Server{Addr: \":6070\"}).ListenAndServe().Error())\n"
		],
		"description": ""
	},
	"snippets tdd testify": {
		"prefix": "tdd testify",
		"body":[
			"// \"github.com/stretchr/testify/assert\"",
			"func TestEqual(t *testing.T) {",
			"\ttestCases := map[string]struct {",
			"\t\tinput    int",
			"\t\texpected int",
			"\t}{",
			"\t\t\"blank\": {",
			"\t\t\tinput:    0,",
			"\t\t\texpected: 0,",
			"\t\t},",
			"\t}",
			"\tfor n, c := range testCases {",
			"\t\tt.Run(n, func(t *testing.T) {",
			"\t\t\tassert.Equal(t, c.expected, c.input)",
			"\t\t})",
			"\t}",
			"}\n"
		],
		"description": ""
	},
	"snippets bdd ginkgo": {
		"prefix": "bdd ginkgo",
		"body":[
			"import (",
			"\t. \"github.com/onsi/ginkgo/v2\"",
			"\t. \"github.com/onsi/gomega\"",
			")\n",
			"var _ = Describe(\"\", func() {",
			"\tvar ()\n",
			"\tBeforeEach(func() {\n",
			"\t})\n",
			"\tIt(\"\", func() {",
			"\t\tExpect(0).To(Equal(0))",
			"\t\tExpect(true).To(BeTrue())",
			"\t\tExpect(func() { panic(\"\") }).To(Panic())",
			"\t})",
			"})\n"
		],
		"description": ""
	},
	"snippets comment lint unused": {
		"prefix": "lint unused",
		"body":[
			"//lint:ignore U1000 Ignore unused."
		],
		"description": ""
	},
	"snippets comment deprecated": {
		"prefix": "deprecated",
		"body":[
			"// Deprecated: "
		],
		"description": ""
	},
	"snippets cgo function": {
		"prefix": "cgo func",
		"body":[
			"func $0() int32 {",
			"\treturn (int32)(C.())",
			"}\n"
		],
		"description": ""
	},
	"snippets cgo import": {
		"prefix": "cgo import",
		"body":[
			"/*",
			"#include <stdlib.h>",
			"$0",
			"*/",
			"import \"C\""
		],
		"description": ""
	}
}
